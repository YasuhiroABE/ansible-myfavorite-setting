---
# tasks file for mfts

- name: setup hostname
  become: true
  hostname: name="{{ mfts_hostname }}"

- name: setup apt repository info
  become: true
  apt_repository:
    repo: "{{ item }}"
    state: present
  with_items:
    - "{{ mfts_add_apt_repositories }}"

- name: remove apt repository info
  become: true
  apt_repository:
    repo: "{{ item }}"
    state: absent
  with_items:
    - "{{ mfts_remove_apt_repositories }}"

- name: install packages
  become: true
  apt: pkg="{{ mfts_packages }}" update_cache=yes cache_valid_time=1200

- name: install additional packages
  become: true
  apt: pkg="{{ mfts_additional_packages }}" update_cache=yes cache_valid_time=1200

- name: remove packages
  become: true
  apt: pkg="{{ mfts_removal_packages }}" state=absent purge=yes

- name: change locales
  become: true
  locale_gen:
    name: "{{ item }}"
  with_items:
    - "{{ mfts_locales }}"

- name: exec update-locale
  become: true
  command: update-locale LANG="{{ mfts_locales[0] }}"

- name: modify escape for screen
  become: true
  lineinfile:
    dest: /etc/screenrc
    regexp: "^escape"
    line: 'escape "^t^t"'

- name: modify hardstatus for screen
  become: true
  lineinfile:
    dest: /etc/screenrc
    regexp: "^hardstatus"
    line: 'hardstatus alwayslastline "%-w [screen %n%?: %t%?] %+w (%Y/%m/%d %c)"'
- name: modify shelltitle for screen
  become: true
  lineinfile:
    dest: /etc/screenrc
    regexp: "^shelltitle"
    line: 'shelltitle  "{{ mfts_hostname }}"'

- name: setting timezone
  become: true
  timezone:
    name: "{{ mfts_timezone }}"

- name: modify dist-upgrade setting in cron-apt config file
  become: true
  lineinfile:
    dest: /etc/cron-apt/action.d/3-download
    regexp: "^dist-upgrade"
    line: "dist-upgrade -y -o APT::Get::Show-Upgraded=true"
  register: result

- name: modify autoremove setting in cron-apt config file
  become: true
  lineinfile:
    dest: /etc/cron-apt/action.d/3-download
    insertafter: "^autoclean"
    regexp: "^autoremove"
    line: "autoremove -y"
  register: result

- name: modify the sshd listen address
  become: true
  lineinfile:
    dest: /etc/ssh/sshd_config
    regexp: "^ListenAddress"
    line: "ListenAddress {{ mfts_sshd_listen_ipaddr }}"
  when: mfts_sshd_listen_ipaddr | length > 0
  register: result

- name: ssh modify the config file to disable password authentication
  become: true
  lineinfile:
    dest: /etc/ssh/sshd_config
    regexp: "^PasswordAuthentication"
    line: "PasswordAuthentication no"
  register: result

- name: enable ssh.service on systemd
  become: true
  systemd:
    name: ssh
    state: started
    enabled: true
  register: result

- name: additional user groups
  become: true
  user:
    name: "{{ item.user }}"
    groups: "{{ item.groups }}"
    append: yes
  with_items:
    - "{{ mfts_additional_groups }}"
  register: result

- name: manage file and directory before copying files.
  become: true
  file:
    path:  "{{ item.path }}"
    state: "{{ item.state }}"
    owner: "{{ item.owner | default('') }}"
    group: "{{ item.group | default('') }}"
    mode:  "{{ item.mode | default('') }}"
  with_items:
    - "{{ mfts_setup_directory }}"
  register: result

- name: copy files using template
  become: true
  copy:
    src: "{{ item.src }}"
    dest: "{{ item.dest }}"
    owner: "{{ item.owner }}"
    group: "{{ item.group }}"
    mode:  "{{ item.mode }}"
  with_items:
    - "{{ mfts_copy_files }}"
  register: result

- name: after copying files, modify these or other files using lineinfile
  become: true
  lineinfile:
    path: "{{ item.path }}"
    state: "{{ item.state | default('present') }}"
    regexp: "{{ item.regexp }}"
    line: "{{ item.line }}"
  with_items:
    - "{{ mfts_lineinfile_after_copyfiles }}"
  register: result

- name: after copying files, execute maintenance command using command
  become: "{{ item.become | default('no') }}"
  command: "{{ item.command }}"
  with_items:
    - "{{ mfts_command_after_copyfiles }}"
  register: result

- name: modify /etc/sysctl.conf
  become: true
  sysctl:
    name: "{{ item.name }}"
    value: "{{ item.value }}"
  with_items:
    - "{{ mfts_sysctl_rules }}"
  register: result

## install ufw module if enabled
- name: install ufw related packages
  become: true
  apt:
    pkg="{{ mfts_ufw_packages }}"
    update_cache=yes
    cache_valid_time=1200
  when: mfts_ufw_allow_rules
    or mfts_ufw_service_rules | length > 0
    or mfts_ipmasquerade_rules | length > 0
    or mfts_ufw_enable
  register: result

##  setup ufw module
- name: allow/deny from specific network
  become: true
  ufw:
    rule: "{{ item.type }}"
    from_ip: "{{ item.from_ip }}"
  with_items:
    - "{{ mfts_ufw_allow_rules }}"
  register: result

- name: allow/deny connection to service from specific network
  become: true
  ufw:
    rule: "{{ item.type }}"
    port: "{{ item.port }}"
    from_ip: "{{ item.from_ip }}"
    to_ip: "{{ item.to_ip }}"
  with_items:
    - "{{ mfts_ufw_service_rules }}"
  register: result

- name: allow/deny rules for incoming (from outside) forward rule
  become: true
  ufw:
    rule: "{{ item.type }}"
    route: "{{ item.route }}"
    interface: "{{ item.interface }}"
    direction: "{{ item.direction }}"
    src: "{{ item.src }}"
  with_items:
    - "{{ mfts_ufw_incoming_forward_rules }}"
  register: result

## setup iptables module for ip masquerade
- name: Enable IP Masquerade
  become: true
  iptables:
    table: nat
    chain: POSTROUTING
    out_interface: "{{ item.interface }}"
    jump: MASQUERADE
  with_items:
    - "{{ mfts_ipmasquerade_rules }}"
  register: result

- name: Deny everything and enable UFW
  become: true
  ufw:
    state: enabled
    policy: deny
  when: mfts_ufw_enable

- name: Enable logging
  become: true
  ufw:
    logging: on
  when: mfts_ufw_enable_logging

## setup systemd module for daemon services
- name: Manage systemd services
  become: true
  systemd:
    name: "{{ item.name }}"
    state: "{{ item.state }}"
    enabled: "{{ item.enabled | default('no') }}"
    daemon_reload: "{{ item.daemon_reload | default('no') }}"
  with_items:
    - "{{ mfts_systemd_rules }}"
