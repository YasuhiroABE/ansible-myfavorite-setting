---
# defaults file for mfts

mfts_packages:
  - screen
  - mlocate
  - net-tools
  - dnsutils
  - iproute2
  - lsof
  - tcpdump
  - nmap
  - binutils
  - cron-apt
  - openssh-server

## setup apt repository info
## (e.g. "deb http://... bionic main")
mfts_add_apt_repositories: []

## remove old apt repository info
mfts_remove_apt_repositories: []

# host specific packages you would like to install.
mfts_additional_packages: []

# host specific packages you would like to remove, even if the package installed by the previous list.
mfts_removal_packages: []

# The top item will be the system default.
mfts_locales:
  - en_US.UTF-8
  - ja_JP.UTF-8

# system-wide tiemzone setting
mfts_timezone: "Asia/Tokyo"

# sshd will only listen on the specified ip address.
mfts_sshd_listen_ipaddr: ''

# set up hostname by the ansible hostname module.
mfts_hostname: "{{ inventory_hostname }}"

# set up additional user's groups (e.g. { user: "user01", groups: "sudo" })
mfts_additional_groups: []

# setup empty directory or files (e.g. { path: "/etc/..", state: "directory", owner: "root", group: "root", mode: "0755" })
mfts_setup_directory: []

# set up file information which you want to copy
# e.g. - { src:"foo.txt", dest:"/tmp/foo.txt", owner:"root", group:"root", mode:"0644" }
mfts_copy_files: []

# e.g. - { path: "/etc/ca-certificates.conf", regexp: "^local/www.example.com.crt$", line: "local/www.example.com.crt", state: "present", insertbefore: "" }
mfts_lineinfile_after_copyfiles: []

# e.g. - { path: "/sbin/dhclient-script", regexp: "^.*make_resolv_conf$", replace: "echo make_resolv_conf", before: "", after: "" }
mfts_replace_after_copyfiles: []

## e.g. - { src: "/bin/bash", dest: "/usr/local/gnu/bin" }
mfts_setup_symlinks_after_copyfiles: []

# e.g. - { command: "echo Hello", become: "no" }
mfts_command_after_copyfiles: []

# set up syctl rules
# e.g. { name: net.ipv4.ip_forward, value: 1 }
mfts_sysctl_rules: []

# setup ufw firewall for Ubuntu
mfts_ufw_packages: ["ufw"]
mfts_ufw_enable: false
mfts_ufw_enable_logging: false
# e.g. { type: "allow", from_ip: "10.0.0.0/8" }
mfts_ufw_allow_rules: []
# e.g. { type: "allow", port: "22", from_ip: "10.0.0.0/8" }
mfts_ufw_service_rules: []
# e.g. { type: "allow", port: "67", interface: "enp2s0", direction: "in", proto: "tcp(default)" }
mfts_ufw_broadcast_rules: []
# e.g. { type: "allow", route: "yes(default)", to_ip: "192.168.1.22", to_port: "22", proto: "tcp(default)" }
mfts_ufw_incoming_forward_rules: []
# e.g. { type: "allow", route: "yes(default)", from_ip: "192.168.1.22", from_port: "22", proto: "tcp(default)" }
mfts_ufw_outgoing_forward_rules: []

# setup iptables firewall rules
# e.g. { in_interface: "enp1s0", incoming_port: "20022", dest_port: "22", dest: "192.168.1.22" }
mfts_iptables_dnat_portforwarding_rules: []
# e.g. { protocol: "tcp(default)", dst: "192.168.1.22", dst_port: "22", src: "192.168.1.1", src_port: "20022" }
mfts_iptables_snat_portforwarding_rules: []
# setup iptables module for ip masquerade (please use ufw module for other configurations)
# e.g. { interface: "enp1s0", source: "192.168.100.1/24" }
mfts_iptables_masquerade_rules: []

# setup systemd services
# e.g. { name: "ssh.service", state: "started", enabled: "no", daemon_reload: "no"  }
mfts_systemd_rules: []

# setup cronjobs
# e.g. { name: "echo hello", minute: "2", job: "echo Hello world!" }  ## Each time related default value is "*"
mfts_cronjob_rules: []

## same as mfts_command_after_copyfiles
mfts_command_atlast: []
